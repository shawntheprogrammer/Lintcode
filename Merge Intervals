/**
 * Definition of Interval:
 * public class Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */

class Solution {
    /**
     * @param intervals: Sorted interval list.
     * @return: A new sorted interval list.
     */
    public List<Interval> merge(List<Interval> intervals) {
        // write your code here
        if (intervals == null || intervals.size() == 0) {
            return intervals;
        }
        List<Interval> result = new ArrayList<>();
        // sort the intervals by start, if same start then use end
        Collections.sort(intervals, new Comparator<Interval>(){
           public int compare(Interval i, Interval j) {
               if (i.start != j.start) {
                   return i.start - j.start;
               } else {
                   return i.end - j.end;
               }
           } 
        });
        
        int lastStart = intervals.get(0).start;
        int lastEnd = intervals.get(0).end;
        for (int i = 1; i < intervals.size(); i++) {
            Interval cur = intervals.get(i);
            if (cur.start > lastEnd) {
                Interval instance = new Interval(lastStart, lastEnd);
                result.add(instance);
                lastStart = cur.start;
                lastEnd = cur.end;
            }  else {
                lastEnd = Math.max(lastEnd, cur.end);
            }
        }
        result.add(new Interval(lastStart, lastEnd));
        return result;
    }

}
