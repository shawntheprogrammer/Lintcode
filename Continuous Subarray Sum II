public class Solution {
    /**
     * @param A an integer array
     * @return  A list of integers includes the index of the first number and the index of the last number
     */
    public ArrayList<Integer> continuousSubarraySumII(int[] A) {
        // Write your code here
        if (A == null || A.length == 0) {
            return new ArrayList<Integer>();
        }
        //max subarray starting position < ending position
        int s0 = 0;
        int[] r0 = new int[]{0, 0};
        int sum0 = A[0];
        int max0 = A[0];
        int totalSum = A[0];
        for (int i = 1; i < A.length; i++) {
            if (sum0 < 0) {
                s0 = i;
            }
            sum0 = Math.max(sum0 + A[i], A[i]);
            if (sum0 > max0) {
                r0[0] = s0; r0[1] = i;
            }
            max0 = Math.max(sum0, max0);
            totalSum += A[i];
        }
        
        //find the min subarray  
        int s1 = 0;
        int[] r1 = new int[]{0, 0};
        int sum1 = A[0];
        int min1 = A[0];
        for (int i = 1; i < A.length; i++) {
            if (sum1 > 0) {
                s1 = i;
            }
            sum1 = Math.min(sum1 + A[i], A[i]);
            if (sum1 < min1) {
                r1[0] = s1; r1[1] = i;
            }
            min1 = Math.min(sum1, min1);
        }
        
        ArrayList<Integer> result = new ArrayList<>();
        //if totalSum == min1 means it's all negative values and max0 would be negative
        if (max0 >= totalSum - min1 || totalSum == min1) {
            result.add(r0[0]);  result.add(r0[1]);
            return result;
        } else {
            result.add(r1[1] + 1);  result.add(r1[0] - 1);
            return result;
        }
    }
}
