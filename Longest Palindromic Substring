public class Solution {
    /**
     * @param s input string
     * @return the longest palindromic substring
     */
    public String longestPalindrome(String s) {
        // Write your code here
        if (s == null || s.length() == 0) {
            return "";
        }
        int start = 0;
        int end = 0;
        for (int pivot = 0; pivot < s.length(); pivot++) {
            //odd length
            int i = pivot;
            int j = pivot;
            while(i - 1 >= 0 && j + 1 < s.length() && s.charAt(i - 1) == s.charAt(j + 1)) {
                i--;
                j++;
            }
            if (j - i > end - start) {
                start = i;
                end = j;
            }
            //even length
            i = pivot + 1;
            j = pivot;
            while(i - 1 >= 0 && j + 1 < s.length() && s.charAt(i - 1) == s.charAt(j + 1)) {
                i--;
                j++;
            }
            if (j - i > end - start) {
                start = i;
                end = j;
            }
        }
        return s.substring(start, end + 1);
    }
}
